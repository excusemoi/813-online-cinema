// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: db.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CinemaDatabaseClient is the client API for CinemaDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaDatabaseClient interface {
	SelectFromDatabase(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectReply, error)
	InsertToDatabase(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*ResultReply, error)
	UpdateInDatabase(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ResultReply, error)
	DeleteFromDatabase(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error)
}

type cinemaDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaDatabaseClient(cc grpc.ClientConnInterface) CinemaDatabaseClient {
	return &cinemaDatabaseClient{cc}
}

func (c *cinemaDatabaseClient) SelectFromDatabase(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectReply, error) {
	out := new(SelectReply)
	err := c.cc.Invoke(ctx, "/db.proto.CinemaDatabase/selectFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaDatabaseClient) InsertToDatabase(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/db.proto.CinemaDatabase/insertToDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaDatabaseClient) UpdateInDatabase(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/db.proto.CinemaDatabase/updateInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaDatabaseClient) DeleteFromDatabase(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/db.proto.CinemaDatabase/deleteFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaDatabaseServer is the server API for CinemaDatabase service.
// All implementations must embed UnimplementedCinemaDatabaseServer
// for forward compatibility
type CinemaDatabaseServer interface {
	SelectFromDatabase(context.Context, *SelectRequest) (*SelectReply, error)
	InsertToDatabase(context.Context, *InsertRequest) (*ResultReply, error)
	UpdateInDatabase(context.Context, *UpdateRequest) (*ResultReply, error)
	DeleteFromDatabase(context.Context, *DeleteRequest) (*ResultReply, error)
	mustEmbedUnimplementedCinemaDatabaseServer()
}

// UnimplementedCinemaDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedCinemaDatabaseServer struct {
}

func (UnimplementedCinemaDatabaseServer) SelectFromDatabase(context.Context, *SelectRequest) (*SelectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectFromDatabase not implemented")
}
func (UnimplementedCinemaDatabaseServer) InsertToDatabase(context.Context, *InsertRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertToDatabase not implemented")
}
func (UnimplementedCinemaDatabaseServer) UpdateInDatabase(context.Context, *UpdateRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInDatabase not implemented")
}
func (UnimplementedCinemaDatabaseServer) DeleteFromDatabase(context.Context, *DeleteRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromDatabase not implemented")
}
func (UnimplementedCinemaDatabaseServer) mustEmbedUnimplementedCinemaDatabaseServer() {}

// UnsafeCinemaDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaDatabaseServer will
// result in compilation errors.
type UnsafeCinemaDatabaseServer interface {
	mustEmbedUnimplementedCinemaDatabaseServer()
}

func RegisterCinemaDatabaseServer(s grpc.ServiceRegistrar, srv CinemaDatabaseServer) {
	s.RegisterService(&CinemaDatabase_ServiceDesc, srv)
}

func _CinemaDatabase_SelectFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaDatabaseServer).SelectFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.proto.CinemaDatabase/selectFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaDatabaseServer).SelectFromDatabase(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaDatabase_InsertToDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaDatabaseServer).InsertToDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.proto.CinemaDatabase/insertToDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaDatabaseServer).InsertToDatabase(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaDatabase_UpdateInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaDatabaseServer).UpdateInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.proto.CinemaDatabase/updateInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaDatabaseServer).UpdateInDatabase(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaDatabase_DeleteFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaDatabaseServer).DeleteFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.proto.CinemaDatabase/deleteFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaDatabaseServer).DeleteFromDatabase(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaDatabase_ServiceDesc is the grpc.ServiceDesc for CinemaDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.proto.CinemaDatabase",
	HandlerType: (*CinemaDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "selectFromDatabase",
			Handler:    _CinemaDatabase_SelectFromDatabase_Handler,
		},
		{
			MethodName: "insertToDatabase",
			Handler:    _CinemaDatabase_InsertToDatabase_Handler,
		},
		{
			MethodName: "updateInDatabase",
			Handler:    _CinemaDatabase_UpdateInDatabase_Handler,
		},
		{
			MethodName: "deleteFromDatabase",
			Handler:    _CinemaDatabase_DeleteFromDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
